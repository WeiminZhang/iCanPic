/*****************************************************************************
*	GSI a socket interface for Micro-controllers and Controller Area Network *
*   Copyright (C) 2014 Glenn Self                                            *
*                                                                            *
*   This program is free software: you can redistribute it and/or modify     *
*   it under the terms of the GNU General Public License as published by     *
*   the Free Software Foundation, either version 3 of the License, or        *
*   (at your option) any later version.                                      *
*                                                                            *
*    This program is distributed in the hope that it will be useful,         *
*    but WITHOUT ANY WARRANTY; without even the implied warranty of          *
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
*    GNU General Public License for more details.                            *
*                                                                            *
*    You should have received a copy of the GNU General Public License       *
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.   *
*****************************************************************************/

/////////////////////////////////////////////////////////////////////////////
// Name:        CloseNodeDialog.cpp
// Purpose:
// Author:      Glenn Self
// Modified by:
// Created:     03/04/2007 11:43:51
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), 03/04/2007 11:43:51

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "CloseNodeDialog.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".

#include <wx/wxprec.h>

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "CloseNodeDialog.h"

////@begin XPM images
////@end XPM images

/*!
 * CloseNodeDialog type definition
 */

IMPLEMENT_DYNAMIC_CLASS( CloseNodeDialog, wxDialog )

/*!
 * CloseNodeDialog event table definition
 */

BEGIN_EVENT_TABLE( CloseNodeDialog, wxDialog )

////@begin CloseNodeDialog event table entries
////@end CloseNodeDialog event table entries

END_EVENT_TABLE()

/*!
 * CloseNodeDialog constructors
 */

CloseNodeDialog::CloseNodeDialog()
{
    Init();
}

CloseNodeDialog::CloseNodeDialog( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}

/*!
 * CloseNodeDialog creator
 */

bool CloseNodeDialog::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin CloseNodeDialog creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end CloseNodeDialog creation
    return true;
}

/*!
 * CloseNodeDialog destructor
 */

CloseNodeDialog::~CloseNodeDialog()
{
////@begin CloseNodeDialog destruction
////@end CloseNodeDialog destruction
}

/*!
 * Member initialisation
 */

void CloseNodeDialog::Init()
{
////@begin CloseNodeDialog member initialisation
////@end CloseNodeDialog member initialisation
}

/*!
 * Control creation for CloseNodeDialog
 */

void CloseNodeDialog::CreateControls()
{
////@begin CloseNodeDialog content construction
    // Generated by DialogBlocks, 17/06/2008 09:28:07 (Personal Edition)

    CloseNodeDialog* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxStaticBox* itemStaticBoxSizer3Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Select node"));
    wxStaticBoxSizer* itemStaticBoxSizer3 = new wxStaticBoxSizer(itemStaticBoxSizer3Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxSpinCtrl* itemSpinCtrl4 = new wxSpinCtrl( itemDialog1, GSI_ID_CLIENT_TEST_SPINCTRL1, _T("254"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS|wxSP_WRAP, 0, 255, 254 );
    itemSpinCtrl4->SetHelpText(_("Hardware node to open (254 is the node physically attached to device)"));
    if (CloseNodeDialog::ShowToolTips())
        itemSpinCtrl4->SetToolTip(_("Hardware node to open (254 is the node physically attached to device)"));
    itemStaticBoxSizer3->Add(itemSpinCtrl4, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton6 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemButton6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton7 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer5->Add(itemButton7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    // Set validators
    itemSpinCtrl4->SetValidator( wxGenericValidator(& m_node) );
////@end CloseNodeDialog content construction
}

/*!
 * Should we show tooltips?
 */

bool CloseNodeDialog::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap CloseNodeDialog::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin CloseNodeDialog bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end CloseNodeDialog bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon CloseNodeDialog::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin CloseNodeDialog icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end CloseNodeDialog icon retrieval
}
