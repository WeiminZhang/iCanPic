/*****************************************************************************
*	GSI a socket interface for Micro-controllers and Controller Area Network *
*   Copyright (C) 2014 Glenn Self                                            *
*                                                                            *
*   This program is free software: you can redistribute it and/or modify     *
*   it under the terms of the GNU General Public License as published by     *
*   the Free Software Foundation, either version 3 of the License, or        *
*   (at your option) any later version.                                      *
*                                                                            *
*    This program is distributed in the hope that it will be useful,         *
*    but WITHOUT ANY WARRANTY; without even the implied warranty of          *
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
*    GNU General Public License for more details.                            *
*                                                                            *
*    You should have received a copy of the GNU General Public License       *
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.   *
*****************************************************************************/
/////////////////////////////////////////////////////////////////////////////
// Name:        GSIClientNBPanel.h
// Purpose:     
// Author:      Glenn Self
// Modified by: 
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), 02/03/2007 11:50:48

#ifndef _GSICLIENTNBPANEL_H_
#define _GSICLIENTNBPANEL_H_

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma interface "GSIClientNBPanel.h"
#endif

/*!
 * Includes
 */

////@begin includes
#include "wx/splitter.h"
////@end includes

#include <gerror.h>
#include "../gsi-server/include/gsidefs.h"
#include "../gsi-server/include/socket.hpp"

/*!
 * Forward declarations
 */

////@begin forward declarations
class wxSplitterWindow;
////@end forward declarations
class GSISocketClient;
class SetDevice;
/*!
 * Control identifiers
 */

////@begin control identifiers
#define ID_GSICLIENTNBPANEL 10002
#define ID_SPLITTERWINDOW 10006
#define ID_PANEL1 10015
#define ID_STATICTEXT 10017
#define ID_COMBOBOX 10018
#define ID_COMBOBOX1 10019
#define ID_KEY_BUTTON0 10021
#define ID_KEY_BUTTON1 10022
#define ID_KEY_BUTTON2 10023
#define ID_KEY_BUTTON3 10024
#define ID_KEY_BUTTON4 10026
#define ID_KEY_BUTTON5 10027
#define ID_KEY_BUTTON6 10028
#define ID_KEY_BUTTON7 10029
#define ID_KEY_BUTTON8 10045
#define ID_KEY_BUTTON9 10046
#define ID_KEY_BUTTON10 10047
#define ID_KEY_BUTTON11 10048
#define wxID_STATIC_DEVICE_NAME 10012
#define ID_TEXTCTRL 10049
#define ID_TEXTCTRL1 10050
#define SYMBOL_GSICLIENTNBPANEL_STYLE 0
#define SYMBOL_GSICLIENTNBPANEL_TITLE _("GSIClientNBPanel")
#define SYMBOL_GSICLIENTNBPANEL_IDNAME ID_GSICLIENTNBPANEL
#define SYMBOL_GSICLIENTNBPANEL_SIZE wxSize(400, 625)
#define SYMBOL_GSICLIENTNBPANEL_POSITION wxDefaultPosition
////@end control identifiers

/*!
 * Compatibility
 */

#ifndef wxCLOSE_BOX
#define wxCLOSE_BOX 0x1000
#endif

class GSIClientNBPanelData: public wxObject
{
public:
    GSIClientNBPanelData();
    GSIClientNBPanelData(const GSIClientNBPanelData& data);
    ~GSIClientNBPanelData();

    void operator=(const GSIClientNBPanelData& data);

    void SetStatusTextCtrl(wxTextCtrl *const tc) {m_StatusText=tc;}
    void SetLCDTextCtrl(wxTextCtrl  *const tc) {m_LCDText=tc;}
    void SetLCDCommandCB(wxComboBox *const cb) {m_LCDCommandCB=cb;}
    void SetAllCommandCB(wxComboBox *const cb) {m_AllCommandCB=cb;}
    void SetStaticTextDeviceName(wxStaticText *const st) {m_StaticTextDeviceName=st;}
    void SetKey(int i,wxButton *constb);
    

    void SetDeviceName(const wxString & dev);

    
    errorType   SetDeviceHandle(GSIHandle device_handle);

    errorType SetNodeHandle(GSINodeHandle node);

    
    wxTextCtrl *const GetStatusTextCtrl()   const {return m_StatusText;}
	//Same as above, just different name
    wxTextCtrl *const GetStatusText()  const {return m_StatusText;}

    wxTextCtrl *const GetLCDTextCtrl()      const {return m_LCDText;}
    wxComboBox *const GetLCDCommandCB()     const {return m_LCDCommandCB;}
    wxComboBox *const GetAllCommandCB()     const {return m_AllCommandCB;}
	//Note that this is a different name GetStatusText rather than StatusTextCtrl

    wxButton   *const GetKey(int k)         const;   

    GSINodeHandle GetNodeHandle() const {return m_node;}           
    int GetDeviceChoiceId() const {return m_deviceChoiceId;}           
    wxString    GetDeviceName() const {return m_DeviceStr;}           

    wxStaticText *const GetStaticTextDeviceName() const {return m_StaticTextDeviceName;}

    void SetSocketClient(GSISocketClient *client) {m_SocketClient=client;}
    GSISocketClient   &       GetSocketClient()   const {return *m_SocketClient;}
    const GSIHandle  GetDeviceHandle() const {return m_deviceHandle;}
private:

    wxTextCtrl  * m_StatusText;
    wxTextCtrl  * m_LCDText;
    wxComboBox  * m_LCDCommandCB;
    wxComboBox  * m_AllCommandCB;
    wxButton    * m_Key[GSIMaxNumKeypadKeys];
    wxStaticText * m_StaticTextDeviceName;   
    GSINodeHandle  m_node;             //the node we are, also our entry in the dataArray    
    
        
    GSISocketClient *m_SocketClient; 
    int         m_deviceChoiceId;   
    wxString    m_DeviceStr;
    GSIHandle   m_deviceHandle;

    DECLARE_DYNAMIC_CLASS(GSIClientNBPanelData)
};


/*!
 * GSIClientNBPanel class declaration
 */
class GSIClientNBPanel: public wxPanel
{    
    DECLARE_DYNAMIC_CLASS( GSIClientNBPanel )
    DECLARE_EVENT_TABLE()

public:
    /// Constructors
    GSIClientNBPanel();
    GSIClientNBPanel( GSIClientNBPanelData *data,int node, wxWindow* parent, wxWindowID id = SYMBOL_GSICLIENTNBPANEL_IDNAME, const wxPoint& pos = SYMBOL_GSICLIENTNBPANEL_POSITION, const wxSize& size = SYMBOL_GSICLIENTNBPANEL_SIZE, long style = SYMBOL_GSICLIENTNBPANEL_STYLE );

    /// Creation
    bool Create(wxWindow* parent, wxWindowID id = SYMBOL_GSICLIENTNBPANEL_IDNAME, const wxPoint& pos = SYMBOL_GSICLIENTNBPANEL_POSITION, const wxSize& size = SYMBOL_GSICLIENTNBPANEL_SIZE, long style = SYMBOL_GSICLIENTNBPANEL_STYLE );

    /// Destructor
    ~GSIClientNBPanel();

    /// Initialises member variables
    void Init(GSIClientNBPanelData *data);

    /// Creates the controls and sizers
    void CreateControls();

////@begin GSIClientNBPanel event handler declarations

    /// wxEVT_COMMAND_COMBOBOX_SELECTED event handler for ID_COMBOBOX
    void OnComboboxSelected( wxCommandEvent& event );

    /// wxEVT_COMMAND_TEXT_ENTER event handler for ID_COMBOBOX
    void OnComboboxEnter( wxCommandEvent& event );

    /// wxEVT_COMMAND_COMBOBOX_SELECTED event handler for ID_COMBOBOX1
    void OnCombobox1Selected( wxCommandEvent& event );

    /// wxEVT_COMMAND_TEXT_ENTER event handler for ID_COMBOBOX1
    void OnCombobox1Enter( wxCommandEvent& event );

    /// wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_KEY_BUTTON0
    void OnKeyButton0Click( wxCommandEvent& event );

////@end GSIClientNBPanel event handler declarations

////@begin GSIClientNBPanel member function declarations

    /// Retrieves bitmap resources
    wxBitmap GetBitmapResource( const wxString& name );

    /// Retrieves icon resources
    wxIcon GetIconResource( const wxString& name );
////@end GSIClientNBPanel member function declarations

    /// Should we show tooltips?
    static bool ShowToolTips();

    void OnGSISocketEvent(wxGSISocketCommandEvent &event);          //handle events for each node in its own panel
    void OnGSISocketCommand(wxGSISocketCommandEvent &event);          //handle events for each node in its own panel

    GSIClientNBPanelData *const  GetData() {return &m_Data;}
    errorType SetNode(int node);
	GSINodeHandle GetNode() const {return m_node;}
    errorType OpenSocket();
	errorType CloseSocket();
    void        Update();           //update panel using panelData


private:
////@begin GSIClientNBPanel member variables
    wxSplitterWindow* m_SplitterWindow;
    wxPanel* m_Panel;
    wxComboBox* m_LCDCommandCB;
    wxComboBox* m_AllCommandCB;
    wxButton* m_Key0;
    wxButton* m_Key1;
    wxButton* m_Key2;
    wxButton* m_Key3;
    wxButton* m_Key4;
    wxButton* m_Key5;
    wxButton* m_Key6;
    wxButton* m_Key7;
    wxButton* m_Key8;
    wxButton* m_Key9;
    wxButton* m_Key10;
    wxButton* m_Key11;
    wxStaticText* m_StaticTextDeviceName;
    wxTextCtrl* m_LCDTextCtrl;
    wxTextCtrl* m_StatusTextCtrl;
////@end GSIClientNBPanel member variables
    GSIClientNBPanelData m_Data;
	GSINodeHandle	m_node;
    wxButton *m_Key[GSIMaxNumKeypadKeys];
};



#endif
    // _GSICLIENTNBPANEL_H_
