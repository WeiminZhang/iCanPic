/*****************************************************************************
*	GSI a socket interface for Micro-controllers and Controller Area Network *
*   Copyright (C) 2014 Glenn Self                                            *
*                                                                            *
*   This program is free software: you can redistribute it and/or modify     *
*   it under the terms of the GNU General Public License as published by     *
*   the Free Software Foundation, either version 3 of the License, or        *
*   (at your option) any later version.                                      *
*                                                                            *
*    This program is distributed in the hope that it will be useful,         *
*    but WITHOUT ANY WARRANTY; without even the implied warranty of          *
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
*    GNU General Public License for more details.                            *
*                                                                            *
*    You should have received a copy of the GNU General Public License       *
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.   *
*****************************************************************************/
/////////////////////////////////////////////////////////////////////////////
// Name:        GSIClientTestframe.h
// Purpose:
// Author:
// Modified by:
// Created:     27/02/2007 17:01:15
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), 27/02/2007 17:01:15

#ifndef _GSICLIENTTESTFRAME_H_
#define _GSICLIENTTESTFRAME_H_

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma interface "GSIClientTestframe.h"
#endif

/*!
 * Includes
 */

////@begin includes
#include "wx/frame.h"
#include "wx/notebook.h"
#include "wx/statusbr.h"
////@end includes

//#include "../socket/gsi.hpp"

#include <gerror.h>
#include "../gsi-common/include/gsidefs.h"


/*!
 * Forward declarations
 */

////@begin forward declarations
class wxNotebook;
class wxMenu;
////@end forward declarations
class GSISocketClient;
class GSIClientNBPanelData;
class wxGSISocketCommandEvent;

/*!
 * Control identifiers
 */

////@begin control identifiers
#define GSI_ID_CLIENT_TESTFRAME 10001
#define GSI_ID_CLIENT_TEST_MAIN_NOTEBOOK 10000
#define GSI_ID_CLIENT_TEST_MENU_EXIT 10009
#define GSI_ID_CLIENT_TEST_MENU_OPEN_SESSION 10010
#define GSI_ID_CLIENT_TEST_MENU_TEST_GSI 10007
#define GSI_ID_CLIENT_TEST_MENU_CLOSE_SESSION 10008
#define GSI_ID_CLIENT_TEST_MENU_OPEN_NODE 10011
#define GSI_ID_CLIENT_TEST_MENU_CLOSE_NODE 10005
#define GSI_ID_CLIENT_TEST_MENU_OPEN_DEVICE 10020
#define GSI_ID_CLIENT_TEST_MENU_CLOSE_DEVICE 10004
#define GSI_ID_CLIENT_TEST_DEBUG_MENU_0 10003
#define GSI_ID_CLIENT_TEST_DEBUG_MENU_1 10014
#define GSI_ID_CLIENT_TEST_STATUSBAR1 10025
#define SYMBOL_GSICLIENTTESTFRAME_STYLE wxCAPTION|wxRESIZE_BORDER|wxSYSTEM_MENU|wxMINIMIZE_BOX|wxCLOSE_BOX
#define SYMBOL_GSICLIENTTESTFRAME_TITLE _("GSICLientTestFrame")
#define SYMBOL_GSICLIENTTESTFRAME_IDNAME GSI_ID_CLIENT_TESTFRAME
#define SYMBOL_GSICLIENTTESTFRAME_SIZE wxSize(400, 720)
#define SYMBOL_GSICLIENTTESTFRAME_POSITION wxDefaultPosition
////@end control identifiers

/*!
 * Compatibility
 */

#ifndef wxCLOSE_BOX
#define wxCLOSE_BOX 0x1000
#endif

/*!
 * GSIClientTestFrame class declaration
 */

class GSIClientTestFrame: public wxFrame
{
    DECLARE_CLASS( GSIClientTestFrame )
    DECLARE_EVENT_TABLE()

public:
    /// Constructors
    GSIClientTestFrame();
    GSIClientTestFrame( wxWindow* parent, wxWindowID id = SYMBOL_GSICLIENTTESTFRAME_IDNAME, const wxString& caption = SYMBOL_GSICLIENTTESTFRAME_TITLE, const wxPoint& pos = SYMBOL_GSICLIENTTESTFRAME_POSITION, const wxSize& size = SYMBOL_GSICLIENTTESTFRAME_SIZE, long style = SYMBOL_GSICLIENTTESTFRAME_STYLE );

    bool Create( wxWindow* parent, wxWindowID id = SYMBOL_GSICLIENTTESTFRAME_IDNAME, const wxString& caption = SYMBOL_GSICLIENTTESTFRAME_TITLE, const wxPoint& pos = SYMBOL_GSICLIENTTESTFRAME_POSITION, const wxSize& size = SYMBOL_GSICLIENTTESTFRAME_SIZE, long style = SYMBOL_GSICLIENTTESTFRAME_STYLE );

    /// Destructor
    ~GSIClientTestFrame();

    /// Initialises member variables
    void Init();

    /// Creates the controls and sizers
    void CreateControls();

////@begin GSIClientTestFrame event handler declarations

    /// wxEVT_COMMAND_MENU_SELECTED event handler for GSI_ID_CLIENT_TEST_MENU_EXIT
    void OnGsiIdClientTestMenuExitClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for GSI_ID_CLIENT_TEST_MENU_OPEN_SESSION
    void OnGsiIdClientTestMenuOpenSessionClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for GSI_ID_CLIENT_TEST_MENU_CLOSE_SESSION
    void OnGsiIdClientTestMenuCloseSessionClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for GSI_ID_CLIENT_TEST_MENU_OPEN_NODE
    void OnGsiIdClientTestMenuOpenNodeClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for GSI_ID_CLIENT_TEST_MENU_CLOSE_NODE
    void OnGsiIdClientTestMenuCloseNodeClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for GSI_ID_CLIENT_TEST_MENU_OPEN_DEVICE
    void OnGsiIdClientTestMenuOpenDeviceClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for GSI_ID_CLIENT_TEST_MENU_CLOSE_DEVICE
    void OnGsiIdClientTestMenuCloseDeviceClick( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for GSI_ID_CLIENT_TEST_DEBUG_MENU_0
    void OnGsiIdClientTestDebugMenu0Click( wxCommandEvent& event );

    /// wxEVT_COMMAND_MENU_SELECTED event handler for GSI_ID_CLIENT_TEST_DEBUG_MENU_1
    void OnGsiIdClientTestDebugMenu1Click( wxCommandEvent& event );

////@end GSIClientTestFrame event handler declarations

////@begin GSIClientTestFrame member function declarations

    int GetNode() const { return m_node ; }
    void SetNode(int value) { m_node = value ; }

    /// Retrieves bitmap resources
    wxBitmap GetBitmapResource( const wxString& name );

    /// Retrieves icon resources
    wxIcon GetIconResource( const wxString& name );
////@end GSIClientTestFrame member function declarations

    /// Should we show tooltips?
    static bool ShowToolTips();

 // 1st-level exception handling: we overload ProcessEvent() to be able to
 // catch exceptions which occur in MyFrame methods here
    virtual bool ProcessEvent(wxEvent& event);

    virtual void OnCloseConnection(wxCommandEvent& event);
    virtual void CloseConnection();

    virtual errorType OpenConnection(int sock_address, const wxString & host);
    //void OnGSISocketEvent(wxCommandEvent& event);       //handle socket events in main class
    //void OnGSISocketEvent(wxSocketEvent& event);       //handle socket events in main class

    void OnGSISocketEvent(wxGSISocketCommandEvent &event);

    void UpdateStatusBar();

    //GSISocketClient   &       GetGSISocketClient()   const {return *m_Client;}
    wxTextCtrl & GetStatusTextCtrl(int node=GSI_NODE_THIS);           //returns the textCtrl associated with the node
	wxTextCtrl *const GetStatusTextCtrl(int node=GSI_NODE_THIS) const;
	wxTextCtrl *const	GetStatusText(int node=GSI_NODE_THIS) const;
    virtual errorType   OpenDevice(GSIClientNBPanelData &panel_data);
    virtual errorType   CloseDevice(GSIClientNBPanelData &panel_data);
	bool				IsNodeOpen(GSINodeHandle h=GSI_NODE_THIS);
	bool				IsDeviceOpen(GSIDevHandle h);
	bool                IsDeviceOpen(const wxString &dev_str) ;
    virtual errorType   OpenSocketSession();                //open socket in current notebook page


    virtual void OnCloseWindow(wxCloseEvent& event);        //close button 'X' pressed


    const wxTextCtrl * GetLCDTextCtrl(int node) const;

    //errorType SetNBPanelData(int node,const GSIClientNBPanelData & data);
    errorType UpdateNBPage(const GSIClientNBPanelData &data);
    const GSIDevHandle  GetDeviceHandle() const {return m_deviceHandle;}
			void		SetDeviceHandle(GSIDevHandle h) {m_deviceHandle=h;}
    const   wxNotebook *    GetNotebook() const {return m_Notebook;}
    void Quit();
	size_t	GetNumPanelsOpen() const {return(m_numPanelsOpen);}

	errorType AddNBPanel(GSIClientNBPanelData & pd);
	errorType RemoveNBPanel(GSINodeHandle h_node);	//remove all panels with this node
	errorType RemoveAllNBPanels(GSIDevHandle h_dev);	//remove all nodes attached to this device
				//remove from notebook, not close on the server

	GSINodeHandle NewNode();	//prompt user for socket,device etc if not already open
	GSIClientNBPanelData *GetPanelData(GSINodeHandle node_handle=GSI_NODE_THIS);
protected:
    virtual errorType   OpenNode(GSIClientNBPanelData &panel_data);
	virtual errorType   CloseNode(GSIClientNBPanelData &panel_data);

private:
////@begin GSIClientTestFrame member variables
    wxNotebook* m_Notebook;
    wxMenu* m_MenuFile;
    wxMenu* m_MenuSocket;
    wxMenu* m_MenuNode;
    wxMenu* m_MenuDebug;
private:
    int m_node;
////@end GSIClientTestFrame member variables


    GSIClientNBPanelData * m_NBPanelDataArray[GSIMaxNumNodes];
    int m_deviceId;                 //obtained throught the choice dialog
    size_t		m_numPanelsOpen;               //Used to create/not create first notebook page
    GSIDevHandle   m_deviceHandle;         //used to identify the device to the server (handle is returned by server on open device)
	int m_numSocketConnections;			//keep count of active connections
};





#endif
    // _GSIClientTESTFRAME_H_
