/*****************************************************************************
*	GSI a socket interface for Micro-controllers and Controller Area Network *
*   Copyright (C) 2014 Glenn Self                                            *
*                                                                            *
*   This program is free software: you can redistribute it and/or modify     *
*   it under the terms of the GNU General Public License as published by     *
*   the Free Software Foundation, either version 3 of the License, or        *
*   (at your option) any later version.                                      *
*                                                                            *
*    This program is distributed in the hope that it will be useful,         *
*    but WITHOUT ANY WARRANTY; without even the implied warranty of          *
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
*    GNU General Public License for more details.                            *
*                                                                            *
*    You should have received a copy of the GNU General Public License       *
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.   *
*****************************************************************************/

/////////////////////////////////////////////////////////////////////////////
// Name:        exitdialog.cpp
// Purpose:     
// Author:      Glenn Self
// Modified by: 
// Created:     22/03/2007 12:36:32
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), 22/03/2007 12:36:32

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "exitdialog.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "exitdialog.h"

////@begin XPM images
////@end XPM images

/*!
 * ExitDialog type definition
 */

IMPLEMENT_DYNAMIC_CLASS( ExitDialog, wxDialog )

/*!
 * ExitDialog event table definition
 */

BEGIN_EVENT_TABLE( ExitDialog, wxDialog )

////@begin ExitDialog event table entries
    EVT_BUTTON( wxID_OK, ExitDialog::OnOKClick )

////@end ExitDialog event table entries

END_EVENT_TABLE()

/*!
 * ExitDialog constructors
 */

ExitDialog::ExitDialog()
{
    Init();
}

ExitDialog::ExitDialog( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}

/*!
 * ExitDialog creator
 */

bool ExitDialog::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin ExitDialog creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end ExitDialog creation
    return true;
}

/*!
 * ExitDialog destructor
 */

ExitDialog::~ExitDialog()
{
////@begin ExitDialog destruction
////@end ExitDialog destruction
}

/*!
 * Member initialisation 
 */

void ExitDialog::Init()
{
////@begin ExitDialog member initialisation
    m_RadioBox = NULL;
////@end ExitDialog member initialisation
}
/*!
 * Control creation for ExitDialog
 */

void ExitDialog::CreateControls()
{    
////@begin ExitDialog content construction
    // Generated by DialogBlocks, 17/06/2008 09:29:07 (Personal Edition)

    ExitDialog* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxArrayString m_RadioBoxStrings;
    m_RadioBoxStrings.Add(_("&Exit leaving all nodes running"));
    m_RadioBoxStrings.Add(_("Exit reseting &this node "));
    m_RadioBoxStrings.Add(_("Exit reseting all nodes"));
    m_RadioBox = new wxRadioBox( itemDialog1, ID_RADIOBOX1, _("Exit type"), wxDefaultPosition, wxDefaultSize, m_RadioBoxStrings, 1, wxRA_SPECIFY_COLS );
    m_RadioBox->SetSelection(1);
    m_RadioBox->SetHelpText(_("Exit the GSI client program. Leaving nodes in specified state(s)"));
    if (ExitDialog::ShowToolTips())
        m_RadioBox->SetToolTip(_("Exit the GSI client program. Leaving nodes in specified state(s)"));
    itemBoxSizer2->Add(m_RadioBox, 0, wxALIGN_LEFT|wxALL, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer4, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton5 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemButton5->SetDefault();
    itemBoxSizer4->Add(itemButton5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton6 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(itemButton6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end ExitDialog content construction
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK
 */

void ExitDialog::OnOKClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK in ExitDialog.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK in ExitDialog. 
}

/*!
 * Should we show tooltips?
 */

bool ExitDialog::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap ExitDialog::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin ExitDialog bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end ExitDialog bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon ExitDialog::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin ExitDialog icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end ExitDialog icon retrieval
}
