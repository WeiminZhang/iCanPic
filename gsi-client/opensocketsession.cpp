/*****************************************************************************
*	GSI a socket interface for Micro-controllers and Controller Area Network *
*   Copyright (C) 2014 Glenn Self                                            *
*                                                                            *
*   This program is free software: you can redistribute it and/or modify     *
*   it under the terms of the GNU General Public License as published by     *
*   the Free Software Foundation, either version 3 of the License, or        *
*   (at your option) any later version.                                      *
*                                                                            *
*    This program is distributed in the hope that it will be useful,         *
*    but WITHOUT ANY WARRANTY; without even the implied warranty of          *
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
*    GNU General Public License for more details.                            *
*                                                                            *
*    You should have received a copy of the GNU General Public License       *
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.   *
*****************************************************************************/

/////////////////////////////////////////////////////////////////////////////
// Name:        opensocketsession.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     27/02/2007 17:01:15
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), 27/02/2007 17:01:15

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "opensocketsession.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif


#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "opensocketsession.h"

#if __VISUALC__
	#ifdef _DEBUG
		#define _CRTDBG_MAP_ALLOC
		#include <crtdbg.h>
		#define DEBUG_NEW new(_NORMAL_BLOCK ,__FILE__, __LINE__)
	#else
		#define DEBUG_NEW new
	#endif
#endif

////@begin XPM images
////@end XPM images

/*!
 * OpenSocketsession type definition
 */

IMPLEMENT_DYNAMIC_CLASS( OpenSocketsession, wxDialog )

/*!
 * OpenSocketsession event table definition
 */

BEGIN_EVENT_TABLE( OpenSocketsession, wxDialog )

////@begin OpenSocketsession event table entries
////@end OpenSocketsession event table entries

END_EVENT_TABLE()

/*!
 * OpenSocketsession constructors
 */

OpenSocketsession::OpenSocketsession()
{
    Init();
}

OpenSocketsession::OpenSocketsession( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}

/*!
 * OpenSocketsession creator
 */

bool OpenSocketsession::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin OpenSocketsession creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end OpenSocketsession creation
    //m_Client->ConnectToServer(3000);
    return true;
}

/*!
 * OpenSocketsession destructor
 */

OpenSocketsession::~OpenSocketsession()
{
////@begin OpenSocketsession destruction
////@end OpenSocketsession destruction
}

/*!
 * Member initialisation 
 */

void OpenSocketsession::Init()
{
////@begin OpenSocketsession member initialisation
    m_addressString = "localhost";
    m_addressInt = 3000;
    m_domain = NULL;
    m_address = NULL;
////@end OpenSocketsession member initialisation
}
/*!
 * Control creation for OpenSocketsession
 */

void OpenSocketsession::CreateControls()
{    
////@begin OpenSocketsession content construction
    // Generated by DialogBlocks, 17/06/2008 20:27:19 (Personal Edition)

    OpenSocketsession* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxStaticBox* itemStaticBoxSizer3Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Enter socket address"));
    wxStaticBoxSizer* itemStaticBoxSizer3 = new wxStaticBoxSizer(itemStaticBoxSizer3Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer3, 1, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, _("domain"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer3->Add(itemStaticText4, 0, wxALIGN_LEFT|wxALL, 5);

    m_domain = new wxTextCtrl( itemDialog1, GSI_ID_CLIENT_TEST_TEXTCTRL2, _("localhost"), wxDefaultPosition, wxSize(130, -1), 0 );
    itemStaticBoxSizer3->Add(m_domain, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemDialog1, wxID_STATIC, _("address"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer3->Add(itemStaticText6, 0, wxALIGN_LEFT|wxALL, 5);

    m_address = new wxTextCtrl( itemDialog1, GSI_ID_CLIENT_TEST_TEXTCTRL3, _("3000"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer3->Add(m_address, 0, wxALIGN_LEFT|wxALL, 5);

    wxBoxSizer* itemBoxSizer8 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer8, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton9 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(itemButton9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton10 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(itemButton10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    // Set validators
    m_domain->SetValidator( wxTextValidator(wxFILTER_NONE, & m_addressString) );
    m_address->SetValidator( wxGenericValidator(& m_addressInt) );
////@end OpenSocketsession content construction
}

/*!
 * Should we show tooltips?
 */

bool OpenSocketsession::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap OpenSocketsession::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin OpenSocketsession bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end OpenSocketsession bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon OpenSocketsession::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin OpenSocketsession icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end OpenSocketsession icon retrieval
}


