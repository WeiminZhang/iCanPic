/*****************************************************************************
*	GSI a socket interface for Micro-controllers and Controller Area Network *
*   Copyright (C) 2014 Glenn Self                                            *
*                                                                            *
*   This program is free software: you can redistribute it and/or modify     *
*   it under the terms of the GNU General Public License as published by     *
*   the Free Software Foundation, either version 3 of the License, or        *
*   (at your option) any later version.                                      *
*                                                                            *
*    This program is distributed in the hope that it will be useful,         *
*    but WITHOUT ANY WARRANTY; without even the implied warranty of          *
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
*    GNU General Public License for more details.                            *
*                                                                            *
*    You should have received a copy of the GNU General Public License       *
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.   *
*****************************************************************************/
/////////////////////////////////////////////////////////////////////////////
// Name:        STLVolFreq.cpp
// Purpose:
// Author:      Glenn Self
// Modified by:
// Created:     30/03/2008 11:24:37
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), 30/03/2008 11:24:37

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "STLVolFreq.cpp"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "STLVolFreq.h"
#if __VISUALC__
	#ifdef _DEBUG
		#define _CRTDBG_MAP_ALLOC
		#include <crtdbg.h>
		#define DEBUG_NEW new(_NORMAL_BLOCK ,__FILE__, __LINE__)
	#else
		#define DEBUG_NEW new
	#endif
#endif


////@begin XPM images
////@end XPM images


/*!
 * STLSetVolFreqDialog type definition
 */

IMPLEMENT_DYNAMIC_CLASS( STLSetVolFreqDialog, wxDialog )

#if 0
/*!
 * STLSetVolFreqDialog event table definition
 */

BEGIN_EVENT_TABLE( STLSetVolFreqDialog, wxDialog )

////@begin STLSetVolFreqDialog event table entries
////@end STLSetVolFreqDialog event table entries

END_EVENT_TABLE()

#endif

/*!
 * STLSetVolFreqDialog constructors
 */

STLSetVolFreqDialog::STLSetVolFreqDialog()
{
    Init();
}

STLSetVolFreqDialog::STLSetVolFreqDialog( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}

/*!
 * Dialog creator
 */

bool STLSetVolFreqDialog::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin STLSetVolFreqDialog creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end STLSetVolFreqDialog creation
    return true;
}

/*!
 * STLSetVolFreqDialog destructor
 */

STLSetVolFreqDialog::~STLSetVolFreqDialog()
{
////@begin STLSetVolFreqDialog destruction
////@end STLSetVolFreqDialog destruction
}

/*!
 * Member initialisation
 */

void STLSetVolFreqDialog::Init()
{
////@begin STLSetVolFreqDialog member initialisation
    m_SineDB = NULL;
    m_SineFrequency = NULL;
    m_NoiseDB = NULL;
    m_Chan = NULL;
////@end STLSetVolFreqDialog member initialisation
}

/*!
 * Control creation for Dialog
 */

void STLSetVolFreqDialog::CreateControls()
{
////@begin STLSetVolFreqDialog content construction
    // Generated by DialogBlocks, 22/08/2008 18:00:33 (Personal Edition)

    STLSetVolFreqDialog* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer3->Add(itemBoxSizer4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer5Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Set Volume and Frequency"));
    wxStaticBoxSizer* itemStaticBoxSizer5 = new wxStaticBoxSizer(itemStaticBoxSizer5Static, wxVERTICAL);
    itemBoxSizer4->Add(itemStaticBoxSizer5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer6 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer5->Add(itemBoxSizer6, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer7Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Set sinewave volume"));
    wxStaticBoxSizer* itemStaticBoxSizer7 = new wxStaticBoxSizer(itemStaticBoxSizer7Static, wxHORIZONTAL);
    itemBoxSizer6->Add(itemStaticBoxSizer7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_SineDBStrings;
    m_SineDB = new wxComboBox( itemDialog1, STL_ID_CLIENT_TEST_SINE_VOL_CB, _("0"), wxDefaultPosition, wxDefaultSize, m_SineDBStrings, wxCB_DROPDOWN );
    m_SineDB->SetStringSelection(_("0"));
    itemStaticBoxSizer7->Add(m_SineDB, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer9Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Sinewave frequency"));
    wxStaticBoxSizer* itemStaticBoxSizer9 = new wxStaticBoxSizer(itemStaticBoxSizer9Static, wxHORIZONTAL);
    itemBoxSizer6->Add(itemStaticBoxSizer9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_SineFrequencyStrings;
    m_SineFrequency = new wxComboBox( itemDialog1, STL_ID_CLIENT_TEST_SINE_FREQ_CB, _("5000"), wxDefaultPosition, wxDefaultSize, m_SineFrequencyStrings, wxCB_DROPDOWN );
    m_SineFrequency->SetStringSelection(_("5000"));
    itemStaticBoxSizer9->Add(m_SineFrequency, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer11Static = new wxStaticBox(itemDialog1, wxID_ANY, _("White noise volume"));
    wxStaticBoxSizer* itemStaticBoxSizer11 = new wxStaticBoxSizer(itemStaticBoxSizer11Static, wxHORIZONTAL);
    itemStaticBoxSizer5->Add(itemStaticBoxSizer11, 0, wxALIGN_LEFT|wxALL, 5);

    wxBoxSizer* itemBoxSizer12 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer11->Add(itemBoxSizer12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_NoiseDBStrings;
    m_NoiseDB = new wxComboBox( itemDialog1, STL_ID_CLIENT_TEST_WN_VOL_CB, _("0"), wxDefaultPosition, wxDefaultSize, m_NoiseDBStrings, wxCB_DROPDOWN );
    m_NoiseDB->SetStringSelection(_("0"));
    itemBoxSizer12->Add(m_NoiseDB, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer14Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Channel"));
    wxStaticBoxSizer* itemStaticBoxSizer14 = new wxStaticBoxSizer(itemStaticBoxSizer14Static, wxHORIZONTAL);
    itemStaticBoxSizer11->Add(itemStaticBoxSizer14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_ChanStrings;
    m_Chan = new wxComboBox( itemDialog1, STL_ID_CLIENT_TEST_CHAN_SC, _("1"), wxDefaultPosition, wxDefaultSize, m_ChanStrings, wxCB_DROPDOWN );
    m_Chan->SetStringSelection(_("1"));
    itemStaticBoxSizer14->Add(m_Chan, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer16 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer16, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton17 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer16->Add(itemButton17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton18 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer16->Add(itemButton18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end STLSetVolFreqDialog content construction

//GS addition
	int i;
	wxString s;
	//m_NoiseDB->SetWindowStyle(wxPROCESS_ENTER|wxCB_DROPDOWN); deprecated, use wxTE_PROCESS_ENTER
    m_NoiseDB->SetWindowStyle(wxTE_PROCESS_ENTER|wxCB_DROPDOWN);

	//m_SineDB->SetWindowStyle(wxPROCESS_ENTER|wxCB_DROPDOWN);
	m_SineDB->SetWindowStyle(wxTE_PROCESS_ENTER|wxCB_DROPDOWN);
	m_SineFrequency->SetWindowStyle(wxTE_PROCESS_ENTER|wxCB_DROPDOWN);
	
	m_Chan->SetWindowStyle(wxTE_PROCESS_ENTER|wxCB_DROPDOWN);

	for(i=0;i<128;i++)
	{
		s.Printf("%i",i);
		m_SineDB->Append(s);
		m_NoiseDB->Append(s);
	}
	for(i=0;i<50000;i+=1000)
	{
		s.Printf("%i",i);
		m_SineFrequency->Append(s);
	}

	for(i=1;i<9;i++)
	{
		s.Printf("%i",i);
		m_Chan->Append(s);
	}

}




/*!
 * Should we show tooltips?
 */

bool STLSetVolFreqDialog::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap STLSetVolFreqDialog::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin STLSetVolFreqDialog bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end STLSetVolFreqDialog bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon STLSetVolFreqDialog::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin STLSetVolFreqDialog icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end STLSetVolFreqDialog icon retrieval

}

